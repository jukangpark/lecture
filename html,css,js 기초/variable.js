// 변수란?

// 변수는 값의 위치(주소)를 기억하는 저장소이다.
// 즉 변수란 값이 위치하고 있는 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 명명한 식별자(identifier) 이다.

// 데이터 타입

// 원시 타입 (primitive data type) vs 객체 타입 (object/reference type)

// 원시 타입
// boolean
// null
// undefined
// number
// string
// symbol (es6 에서 추가)

// 객체 타입
// object

// 리터럴
// 값을 새성할때는 '리터럴 표기법'을 사용함 (가장 간단)

// 숫자 리터럴
10.5;
// 문자 리터럴
("string");

// 객체 리터럴 {}
// 배열 리터럴 []
// 함수 리터럴 function () {}

var foo;

console.log(foo);

// 심볼 (Symbol)은 ES6 에서 추가된 7번째 타입으로 변경 불가능한 원시 타입의 값이다.
// 주로 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키를 만들기 위해 사용한다.
// 심볼은 Symbol 함수를 호출해 생성한다.
// 이때 생성된 심볼 값은 다른 심볼값들과 다른 유일한 심볼 값이다.
var key = Symbol("key");
console.log(typeof key); // symbol

// 타입을 컴파일 타임에 확인하는 언어를 정적타입 언어라 하고 런타임에 확인하는 언어를 동적타입 언어라 합니다.
// 자바스크립트는 동적 타입의 언어이다.
// 이것은 변수의 타입 지정없이 값이 할당되는 과정에서 값의 타입에 의해 자동으로 타입이 결정될 것 이라는 뜻이다.
// 따라서 같은 변수에 여러 타입의 값을 할당 할 수 있다. 이를 동적 타이핑 이라고 한다.

var foo2;

console.log(typeof foo2);

foo2 = null;

foo2 = {};

foo2 = 3;

foo2 = "hi";

foo2 = true;
// ------------------------------------------------------

// 변수 호이스팅 개념
// 변수는 3단계에 걸쳐 생성됨

// 선언단계 (Declaration phase)
// 초기화 단계 (Initialization phase)
// 할당 단계 (Assignment phase)

// 함수 레벨 스코프
// 블록 레벨 스코프

// var 키워드로 선언된 변수의 문제점
// var vs let, const (es6)
// EMAScript 가 나온 이유 ? -> 크로스 브라우징 이슈
// ES5 는 2009년에 발표되었고,
// ES6 는 2015년에 발표되었음.

// 표현식(expression)과 연산자(operator)

// 표현식이란 리터럴, 식별자, 연산자, 함수 호출등의 조합
// 표현식은 평가 (evaluation) 되어 하나의 '값'을 만듬.
// 즉 표현식은 하나의 값으로 평가될 수 있는 문(statement)이다.

10; // 리터럴 표현식
// 표현식은 평가되어 결국 하나의 값이 되므로 표현식과 값은 동등한 관계, 즉 동치(Equivalent) 이다.
// 다시 말해, 표현식은 값처럼 사용할 수 있다.

// 문이란(statement)
// 자바스크립트 엔진에게 내리는 명령이다.
var x;
x = 5;
function func() {}

if (x > 5) {
}

// 문은 리터럴, 연산자, 표현식, 키워드 등으로 구성되며 세미콜론(;)으로 끝나야 한다.

// 연산자란? (Operator)
